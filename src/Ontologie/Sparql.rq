SELECT ?Cell WHERE {?Cell rdf:type grid:PlayerCell.}

// Return le joueur et sa pos X et Y
SELECT ?Player ?X ?Y
WHERE {
    ?Player a grid:PlayerCell .
    ?Player grid:X ?X .
    ?Player grid:Y ?Y .
}

// Return toutes les Cell avec leurs pos X et Y
SELECT ?Cell ?X ?Y
WHERE {
    ?Cell a grid:Cell .
    ?Cell grid:X ?X .
    ?Cell grid:Y ?Y .
}

// Suppression puis insertion de propriété
DELETE {
    ?c rdf:type :CellPlayer
}
INSERT {
    ?dir rdf:type :CellPlayer
}
WHERE {
    ?c rdf:type :CellPlayer .
    ?dir rdf:type :isEast
}


pour enregistrer les règles dans le fichier .ttl de l’ontologie, utiliser la syntaxe suivante :

[ rdf:type rule:SPARQLRule ;
  rule:content """
IF {
    ?r a :Rectangle ;
       :width ?w ;
       :height ?h
    BIND (?w * ?h AS ?area)
}
THEN {
    ?r :area ?area
}
"""
] .




build_grid(){
  let request = `
      SELECT ?Player ?X ?Y
      WHERE{
          ?Player a grid:PlayerCell .
          ?Player grid:X ?X .
          ?Player grid:Y ?Y .
      }
  `;
  let player = this.stardog(request);

  console.log("coucou : " ,player);
},

stardog(request){
    const { Connection, query } = require('stardog');

    const conn = new Connection({
        username: 'admin',
        password: 'admin',
        endpoint: 'http://localhost:5820',
    });

    query.execute(conn, 'ontologie_db', request, 'application/sparql-results+json', {
        limit: 10,
        offset: 0,
        reasoning: true
    }).then(({ body }) => {
        // console.log(body.results.bindings);
        // console.log(body.results.bindings[0].X.value);
        // console.log(body.results.bindings[0].Y.value);
        return body.results.bindings;
    });
}
